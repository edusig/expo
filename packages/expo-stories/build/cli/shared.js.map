{"version":3,"file":"shared.js","sourceRoot":"","sources":["../../cli/shared.ts"],"names":[],"mappings":";;;;;;AAAA,8CAAwB;AAIX,QAAA,cAAc,GAAG,uBAAuB,CAAC;AAEzC,QAAA,aAAa,GAAiB;IACzC,WAAW,EAAE,OAAO,CAAC,GAAG,EAAE;IAC1B,SAAS,EAAE,OAAO,CAAC,GAAG,EAAE;CACzB,CAAC;AAEF,SAAgB,mBAAmB,CAAC,WAAmB;IACrD,IAAM,gBAAgB,GAAG,cAAI,CAAC,OAAO,CAAC,WAAW,EAAE,sBAAc,EAAE,oBAAoB,CAAC,CAAC;IACzF,OAAO,gBAAgB,CAAC;AAC1B,CAAC;AAHD,kDAGC;AAED,SAAgB,gBAAgB,CAAC,WAAmB;IAClD,IAAM,gBAAgB,GAAG,mBAAmB,CAAC,WAAW,CAAC,CAAC;IAC1D,IAAM,aAAa,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAC;IAChD,OAAO,aAAa,CAAC;AACvB,CAAC;AAJD,4CAIC;AAED,SAAgB,UAAU,CAAC,MAAoB;IAC7C,IAAM,aAAa,GAAG,gBAAgB,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;IAC3D,IAAM,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,UAAA,GAAG;QACtD,OAAO,aAAa,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAClC,CAAC,CAAC,CAAC;IAEH,OAAO,OAAO,CAAC;AACjB,CAAC;AAPD,gCAOC;AAED,SAAgB,aAAa,CAAC,MAAoB;IAChD,IAAM,UAAU,GAAG,cAAI,CAAC,OAAO,CAAC,MAAM,CAAC,WAAW,EAAE,sBAAc,CAAC,CAAC;IACpE,OAAO,UAAU,CAAC;AACpB,CAAC;AAHD,sCAGC;AAED,SAAgB,cAAc,CAAC,MAAoB;IACjD,IAAM,UAAU,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC;IACzC,IAAM,SAAS,GAAG,cAAI,CAAC,OAAO,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC;IACzD,OAAO,SAAS,CAAC;AACnB,CAAC;AAJD,wCAIC;AAED,SAAgB,UAAU,CAAC,QAAgB;IACzC,uDAAuD;IACvD,IAAM,EAAE,GAAG,QAAQ,CAAC,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC,CAAC;IAChD,OAAO,EAAE,CAAC;AACZ,CAAC;AAJD,gCAIC","sourcesContent":["import path from 'path';\n\nimport { StoryOptions, StoryManifest } from '../types';\n\nexport const storiesDirName = '__generated__/stories';\n\nexport const defaultConfig: StoryOptions = {\n  projectRoot: process.cwd(),\n  watchRoot: process.cwd(),\n};\n\nexport function getManifestFilePath(projectRoot: string) {\n  const manifestFilePath = path.resolve(projectRoot, storiesDirName, 'storyManifest.json');\n  return manifestFilePath;\n}\n\nexport function getStoryManifest(projectRoot: string): StoryManifest {\n  const manifestFilePath = getManifestFilePath(projectRoot);\n  const storyManifest = require(manifestFilePath);\n  return storyManifest;\n}\n\nexport function getStories(config: StoryOptions) {\n  const storyManifest = getStoryManifest(config.projectRoot);\n  const stories = Object.keys(storyManifest.files).map(key => {\n    return storyManifest.files[key];\n  });\n\n  return stories;\n}\n\nexport function getStoriesDir(config: StoryOptions) {\n  const storiesDir = path.resolve(config.projectRoot, storiesDirName);\n  return storiesDir;\n}\n\nexport function getStoriesFile(config: StoryOptions) {\n  const storiesDir = getStoriesDir(config);\n  const storyFile = path.resolve(storiesDir, 'stories.js');\n  return storyFile;\n}\n\nexport function generateId(filePath: string) {\n  // replaces all non-alphabet characters in the filePath\n  const id = filePath.replace(/[^a-zA-Z]+/gi, '');\n  return id;\n}\n"]}