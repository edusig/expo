{"version":3,"file":"writeStoriesAsync.js","sourceRoot":"","sources":["../../cli/writeStoriesAsync.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,sDAA2B;AAC3B,8CAAwB;AAGxB,mCAA2D;AAE3D,SAAsB,iBAAiB,CAAC,MAAoB;;;;;;oBACpD,aAAa,GAAG,yBAAgB,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;oBACrD,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,UAAA,EAAE,IAAI,OAAA,aAAa,CAAC,KAAK,CAAC,EAAE,CAAC,EAAvB,CAAuB,CAAC,CAAC;oBAEhF,QAAQ,GAAG,+CAET,OAAO,CAAC,GAAG,CAAC,UAAA,KAAK,IAAI,OAAA,wBAAwB,CAAC,KAAK,CAAC,EAA/B,CAA+B,CAAC,mDAExD,CAAC;oBAEJ,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE;wBAC3B,QAAQ,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC,aAAa,CAAC,QAAQ,EAAE;4BACpD,MAAM,EAAE,IAAI;yBACb,CAAC,CAAC,IAAI,CAAC;qBACT;oBAEK,UAAU,GAAG,sBAAa,CAAC,MAAM,CAAC,CAAC;oBACnC,iBAAiB,GAAG,cAAI,CAAC,OAAO,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC;oBACjE,qBAAM,kBAAG,CAAC,SAAS,CAAC,iBAAiB,EAAE,QAAQ,EAAE,EAAE,QAAQ,EAAE,OAAO,EAAE,CAAC,EAAA;;oBAAvE,SAAuE,CAAC;;;;;CACzE;AAnBD,8CAmBC;AAED,0FAA0F;AAC1F,SAAS,wBAAwB,CAAC,KAAgB;IAChD,IAAM,YAAY,GAAG,KAAK,CAAC,YAAY;SACpC,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC;SAC3B,KAAK,CAAC,GAAG,CAAC;SACV,GAAG,EAAE,CAAC;IAET,OAAO,oBACM,KAAK,CAAC,EAAE,mDACU,KAAK,CAAC,QAAQ,yFAEpB,KAAK,CAAC,EAAE,8DACiB,YAAY,4LAMnC,KAAK,CAAC,EAAE,yTAe/B,KAAK,CAAC,EAAE,gBACX,CAAC;AACJ,CAAC","sourcesContent":["import fse from 'fs-extra';\nimport path from 'path';\n\nimport { StoryOptions, StoryFile } from '../types';\nimport { getStoriesDir, getStoryManifest } from './shared';\n\nexport async function writeStoriesAsync(config: StoryOptions) {\n  const storyManifest = getStoryManifest(config.projectRoot);\n  const stories = Object.keys(storyManifest.files).map(id => storyManifest.files[id]);\n\n  let template = `\n      const storiesToExport = {}\n      ${stories.map(story => generateTemplateForStory(story))}\n      module.exports = storiesToExport\n    `;\n\n  if (!process.env.EXPO_DEBUG) {\n    template = require('esbuild').transformSync(template, {\n      minify: true,\n    }).code;\n  }\n\n  const storiesDir = getStoriesDir(config);\n  const writeRequiresPath = path.resolve(storiesDir, 'stories.js');\n  await fse.writeFile(writeRequiresPath, template, { encoding: 'utf-8' });\n}\n\n// the formatting of this template is important because it preserves fast refresh w/ metro\nfunction generateTemplateForStory(story: StoryFile) {\n  const defaultTitle = story.relativePath\n    .replace('.stories.tsx', '')\n    .split('/')\n    .pop();\n\n  return `\n    function ${story.id}Setup() {\n      const stories = require(\"${story.fullPath}\")\n      const parentConfig = stories.default || {}\n      parentConfig.id = \"${story.id}\"\n      parentConfig.title = parentConfig.title || '${defaultTitle}'\n\n      Object.keys(stories).forEach((key) => {\n        const Component = stories[key]\n        \n        if (typeof Component === \"function\") {\n          const storyId = \"${story.id}\" + \"_\" + key\n          \n          Component.storyConfig = {\n            id: storyId,\n            name: key,\n            ...Component.storyConfig,\n          }\n\n          Component.parentConfig = parentConfig\n\n          storiesToExport[storyId] = Component \n        }\n      })\n    }\n\n    ${story.id}Setup()\n  `;\n}\n"]}